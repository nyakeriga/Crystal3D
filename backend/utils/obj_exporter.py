from typing import List, Tuple

Vertex = Tuple[float, float, float]
Face = Tuple[int, int, int]  # assuming triangles; can be adapted

class OBJExporter:
    """
    A powerful, reusable OBJ exporter for mesh data.
    """

    def __init__(self, vertices: List[Vertex], faces: List[Face]):
        if not vertices:
            raise ValueError("Vertices list cannot be empty.")
        if not faces:
            raise ValueError("Faces list cannot be empty.")

        self.vertices = vertices
        self.faces = faces

    def save(self, filename: str) -> None:
        """
        Save the mesh as an OBJ file.

        Args:
            filename (str): Path to the output .obj file.

        Raises:
            IOError: If the file cannot be written.
        """
        try:
            with open(filename, 'w') as file:
                file.write("# OBJ file generated by crystalcraft3d\n")
                for v in self.vertices:
                    file.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")

                for face in self.faces:
                    # OBJ uses 1-based indexing
                    indices = [str(idx) for idx in face]
                    file.write(f"f {' '.join(indices)}\n")

        except IOError as e:
            raise IOError(f"Failed to write OBJ file '{filename}': {e}")

# Example usage:
# vertices = [(0.0,0.0,0.0), (1.0,0.0,0.0), (0.0,1.0,0.0)]
# faces = [(1,2,3)]
# exporter = OBJExporter(vertices, faces)
# exporter.save("output.obj")

